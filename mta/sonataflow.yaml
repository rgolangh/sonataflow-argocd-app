# To be used by kustomize
apiVersion: sonataflow.org/v1alpha08
kind: SonataFlow
metadata:
  name: mta
  annotations:
    sonataflow.org/description: MTA analysis workflow
    sonataflow.org/version: 0.0.6
spec:
  flow:
    specVersion: 0.8
    id: MTAAnalysis
    name: Run MTA analysis
    annotations:
      - "workflow-type/infrastructure"
    version: 1.0v
    timeouts:
      workflowExecTimeout: PT1H
    start: Head
    dataInputSchema: mta-schema.json
    functions:
      - name: debug
        type: custom
        operation: sysout
      - name: filterApplication
        type: expression
        operation: "{application: .applications|map(select(.repository.url == .repositoryURL))[0]}"
      - name: getApplication
        type: custom
        operation: rest:get:https://mta-openshift-mta.apps.parodos-dev.projects.ecosystem.sysdeseng.com:443/hub/applications
      - name: createApplication
        type: custom
        operation: rest:post:https://mta-openshift-mta.apps.parodos-dev.projects.ecosystem.sysdeseng.com:443/hub/applications
      - name: createTaskgroup
        type: custom
        operation: rest:post:https://mta-openshift-mta.apps.parodos-dev.projects.ecosystem.sysdeseng.com:443/hub/taskgroups
      - name: submitTaskgroup
        type: custom
        operation: rest:put:https://mta-openshift-mta.apps.parodos-dev.projects.ecosystem.sysdeseng.com:443/hub/taskgroups/{id}/submit
      - name: getTaskgroup
        type: custom
        operation: rest:get:https://mta-openshift-mta.apps.parodos-dev.projects.ecosystem.sysdeseng.com:443/hub/taskgroups/{id}
      - name: customServiceCall
        type: custom
        operation: service:java:org.rgo.ServiceImpl::manipulate
    events:
      - name: foo
        type: kogito.sw.foo
        kind: produced
    states:
      - name: Head
        type: inject
        data: { }
        transition:
          nextState: GetApplication
          produceEvents:
            - eventRef: foo
        end: false
      - name: GetApplication
        type: operation
        actionMode: sequential
        actions:
          - name: tryCustom
            functionRef: customServiceCall
          - name: getApp
            functionRef: getApplication
            actionDataFilter:
              toStateData: ".applications"
        stateDataFilter:
          output: "{repositoryURL: .repositoryURL, application: .repositoryURL as $r| if
          .applications == null then null else .applications|map(select(.repository.url
          == $r))[0] end}"
        transition: AppExist
      - name: AppExist
        type: switch
        dataConditions:
          - condition: ".application != null"
            transition:
              nextState: CreateTaskgroup
              produceEvents:
                - eventRef: foo
        defaultCondition:
          transition: CreateApplication

      - name: CreateApplication
        type: operation
        actions:
          - functionRef:
              refName: createApplication
              arguments:
                name: ".repositoryURL"
                repository:
                  url: ".repositoryURL"
                  kind: git
            actionDataFilter:
              results: "{application: .}"
        transition: CreateTaskgroup
      - name: CreateTaskgroup
        type: operation
        actionMode: sequential
        actions:
          - functionRef:
              refName: createTaskgroup
              arguments:
                name: taskgroup.windup
                addon: windup
                data:
                  output: "/windup/report"
                  rules:
                    path: ''
                  scope:
                    withKnown: false
                  sources: [ ]
                  targets:
                    - cloud-readiness
                tasks:
                  - name: parodos.windup
                    application:
                      id: ".application.id"
            actionDataFilter:
              toStateData: ".taskgroup"
        transition: SubmitAnalysis
      - name: SubmitAnalysis
        type: operation
        actionMode: sequential
        actions:
          - name: submitTaskgroup
            functionRef:
              refName: submitTaskgroup
              arguments: ".taskgroup"
        transition: GetAnalysis
      - name: GetAnalysis
        type: operation
        actionMode: sequential
        actions:
          - name: getTaskgroup
            functionRef:
              refName: getTaskgroup
              arguments:
                id: ".taskgroup.id"
            actionDataFilter:
              toStateData: ".taskgroup"
        transition: poll
      - actions:
          - functionRef:
              refName: getTaskgroup
              arguments:
                id: ".taskgroup.id"
            actionDataFilter:
              toStateData: ".taskgroup"
            sleep:
              before: PT2S
        name: poll
        type: operation
        transition: checkReportDone
      - name: checkReportDone
        type: switch
        dataConditions:
          - condition: (.taskgroup.state == "Ready" and .taskgroup.tasks[0].state == "Succeeded")
            transition: report
        defaultCondition:
          transition: poll
      - name: report
        type: operation
        stateDataFilter:
          output: '{result: .taskgroup.tasks[0]| .mtaURL + "/hub/applications" + "/" + (.application.id|tostring)
          + "/bucket/" + .data.output}'
        end: true

